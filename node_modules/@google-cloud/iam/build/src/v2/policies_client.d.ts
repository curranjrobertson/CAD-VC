/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  An interface for managing Identity and Access Management (IAM) policies.
 * @class
 * @memberof v2
 */
export declare class PoliciesClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    operationsClient: gax.OperationsClient;
    policiesStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of PoliciesClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
     *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new PoliciesClient({fallback: 'rest'}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets a policy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the policy to retrieve. Format:
     *   `policies/{attachment_point}/denypolicies/{policy_id}`
     *
     *
     *   Use the URL-encoded full resource name, which means that the forward-slash
     *   character, `/`, must be written as `%2F`. For example,
     *   `policies/cloudresourcemanager.googleapis.com%2Fprojects%2Fmy-project/denypolicies/my-policy`.
     *
     *   For organizations and folders, use the numeric ID in the full resource
     *   name. For projects, you can use the alphanumeric or the numeric ID.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.iam.v2.Policy|Policy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/policies.get_policy.js</caption>
     * region_tag:iam_v2_generated_Policies_GetPolicy_async
     */
    getPolicy(request?: protos.google.iam.v2.IGetPolicyRequest, options?: CallOptions): Promise<[
        protos.google.iam.v2.IPolicy,
        protos.google.iam.v2.IGetPolicyRequest | undefined,
        {} | undefined
    ]>;
    getPolicy(request: protos.google.iam.v2.IGetPolicyRequest, options: CallOptions, callback: Callback<protos.google.iam.v2.IPolicy, protos.google.iam.v2.IGetPolicyRequest | null | undefined, {} | null | undefined>): void;
    getPolicy(request: protos.google.iam.v2.IGetPolicyRequest, callback: Callback<protos.google.iam.v2.IPolicy, protos.google.iam.v2.IGetPolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a policy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource that the policy is attached to, along with the kind of policy
     *   to create. Format: `policies/{attachment_point}/denypolicies`
     *
     *
     *   The attachment point is identified by its URL-encoded full resource name,
     *   which means that the forward-slash character, `/`, must be written as
     *   `%2F`. For example,
     *   `policies/cloudresourcemanager.googleapis.com%2Fprojects%2Fmy-project/denypolicies`.
     *
     *   For organizations and folders, use the numeric ID in the full resource
     *   name. For projects, you can use the alphanumeric or the numeric ID.
     * @param {google.iam.v2.Policy} request.policy
     *   Required. The policy to create.
     * @param {string} request.policyId
     *   The ID to use for this policy, which will become the final component of
     *   the policy's resource name. The ID must contain 3 to 63 characters. It can
     *   contain lowercase letters and numbers, as well as dashes (`-`) and periods
     *   (`.`). The first character must be a lowercase letter.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/policies.create_policy.js</caption>
     * region_tag:iam_v2_generated_Policies_CreatePolicy_async
     */
    createPolicy(request?: protos.google.iam.v2.ICreatePolicyRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.iam.v2.IPolicy, protos.google.iam.v2.IPolicyOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createPolicy(request: protos.google.iam.v2.ICreatePolicyRequest, options: CallOptions, callback: Callback<LROperation<protos.google.iam.v2.IPolicy, protos.google.iam.v2.IPolicyOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createPolicy(request: protos.google.iam.v2.ICreatePolicyRequest, callback: Callback<LROperation<protos.google.iam.v2.IPolicy, protos.google.iam.v2.IPolicyOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createPolicy()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/policies.create_policy.js</caption>
     * region_tag:iam_v2_generated_Policies_CreatePolicy_async
     */
    checkCreatePolicyProgress(name: string): Promise<LROperation<protos.google.iam.v2.Policy, protos.google.iam.v2.PolicyOperationMetadata>>;
    /**
     * Updates the specified policy.
     *
     * You can update only the rules and the display name for the policy.
     *
     * To update a policy, you should use a read-modify-write loop:
     *
     * 1. Use {@link protos.google.iam.v2.Policies.GetPolicy|GetPolicy} to read the current version of the policy.
     * 2. Modify the policy as needed.
     * 3. Use `UpdatePolicy` to write the updated policy.
     *
     * This pattern helps prevent conflicts between concurrent updates.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.iam.v2.Policy} request.policy
     *   Required. The policy to update.
     *
     *   To prevent conflicting updates, the `etag` value must match the value that
     *   is stored in IAM. If the `etag` values do not match, the request fails with
     *   a `409` error code and `ABORTED` status.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/policies.update_policy.js</caption>
     * region_tag:iam_v2_generated_Policies_UpdatePolicy_async
     */
    updatePolicy(request?: protos.google.iam.v2.IUpdatePolicyRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.iam.v2.IPolicy, protos.google.iam.v2.IPolicyOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updatePolicy(request: protos.google.iam.v2.IUpdatePolicyRequest, options: CallOptions, callback: Callback<LROperation<protos.google.iam.v2.IPolicy, protos.google.iam.v2.IPolicyOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updatePolicy(request: protos.google.iam.v2.IUpdatePolicyRequest, callback: Callback<LROperation<protos.google.iam.v2.IPolicy, protos.google.iam.v2.IPolicyOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updatePolicy()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/policies.update_policy.js</caption>
     * region_tag:iam_v2_generated_Policies_UpdatePolicy_async
     */
    checkUpdatePolicyProgress(name: string): Promise<LROperation<protos.google.iam.v2.Policy, protos.google.iam.v2.PolicyOperationMetadata>>;
    /**
     * Deletes a policy. This action is permanent.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the policy to delete. Format:
     *   `policies/{attachment_point}/denypolicies/{policy_id}`
     *
     *
     *   Use the URL-encoded full resource name, which means that the forward-slash
     *   character, `/`, must be written as `%2F`. For example,
     *   `policies/cloudresourcemanager.googleapis.com%2Fprojects%2Fmy-project/denypolicies/my-policy`.
     *
     *   For organizations and folders, use the numeric ID in the full resource
     *   name. For projects, you can use the alphanumeric or the numeric ID.
     * @param {string} [request.etag]
     *   Optional. The expected `etag` of the policy to delete. If the value does not match
     *   the value that is stored in IAM, the request fails with a `409` error code
     *   and `ABORTED` status.
     *
     *   If you omit this field, the policy is deleted regardless of its current
     *   `etag`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/policies.delete_policy.js</caption>
     * region_tag:iam_v2_generated_Policies_DeletePolicy_async
     */
    deletePolicy(request?: protos.google.iam.v2.IDeletePolicyRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.iam.v2.IPolicy, protos.google.iam.v2.IPolicyOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deletePolicy(request: protos.google.iam.v2.IDeletePolicyRequest, options: CallOptions, callback: Callback<LROperation<protos.google.iam.v2.IPolicy, protos.google.iam.v2.IPolicyOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deletePolicy(request: protos.google.iam.v2.IDeletePolicyRequest, callback: Callback<LROperation<protos.google.iam.v2.IPolicy, protos.google.iam.v2.IPolicyOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deletePolicy()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/policies.delete_policy.js</caption>
     * region_tag:iam_v2_generated_Policies_DeletePolicy_async
     */
    checkDeletePolicyProgress(name: string): Promise<LROperation<protos.google.iam.v2.Policy, protos.google.iam.v2.PolicyOperationMetadata>>;
    /**
     * Retrieves the policies of the specified kind that are attached to a
     * resource.
     *
     * The response lists only policy metadata. In particular, policy rules are
     * omitted.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource that the policy is attached to, along with the kind of policy
     *   to list. Format:
     *   `policies/{attachment_point}/denypolicies`
     *
     *
     *   The attachment point is identified by its URL-encoded full resource name,
     *   which means that the forward-slash character, `/`, must be written as
     *   `%2F`. For example,
     *   `policies/cloudresourcemanager.googleapis.com%2Fprojects%2Fmy-project/denypolicies`.
     *
     *   For organizations and folders, use the numeric ID in the full resource
     *   name. For projects, you can use the alphanumeric or the numeric ID.
     * @param {number} request.pageSize
     *   The maximum number of policies to return. IAM ignores this value and uses
     *   the value 1000.
     * @param {string} request.pageToken
     *   A page token received in a {@link protos.google.iam.v2.ListPoliciesResponse|ListPoliciesResponse}. Provide this token to
     *   retrieve the next page.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.iam.v2.Policy|Policy}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listPoliciesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listPolicies(request?: protos.google.iam.v2.IListPoliciesRequest, options?: CallOptions): Promise<[
        protos.google.iam.v2.IPolicy[],
        protos.google.iam.v2.IListPoliciesRequest | null,
        protos.google.iam.v2.IListPoliciesResponse
    ]>;
    listPolicies(request: protos.google.iam.v2.IListPoliciesRequest, options: CallOptions, callback: PaginationCallback<protos.google.iam.v2.IListPoliciesRequest, protos.google.iam.v2.IListPoliciesResponse | null | undefined, protos.google.iam.v2.IPolicy>): void;
    listPolicies(request: protos.google.iam.v2.IListPoliciesRequest, callback: PaginationCallback<protos.google.iam.v2.IListPoliciesRequest, protos.google.iam.v2.IListPoliciesResponse | null | undefined, protos.google.iam.v2.IPolicy>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource that the policy is attached to, along with the kind of policy
     *   to list. Format:
     *   `policies/{attachment_point}/denypolicies`
     *
     *
     *   The attachment point is identified by its URL-encoded full resource name,
     *   which means that the forward-slash character, `/`, must be written as
     *   `%2F`. For example,
     *   `policies/cloudresourcemanager.googleapis.com%2Fprojects%2Fmy-project/denypolicies`.
     *
     *   For organizations and folders, use the numeric ID in the full resource
     *   name. For projects, you can use the alphanumeric or the numeric ID.
     * @param {number} request.pageSize
     *   The maximum number of policies to return. IAM ignores this value and uses
     *   the value 1000.
     * @param {string} request.pageToken
     *   A page token received in a {@link protos.google.iam.v2.ListPoliciesResponse|ListPoliciesResponse}. Provide this token to
     *   retrieve the next page.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.iam.v2.Policy|Policy} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listPoliciesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listPoliciesStream(request?: protos.google.iam.v2.IListPoliciesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listPolicies`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource that the policy is attached to, along with the kind of policy
     *   to list. Format:
     *   `policies/{attachment_point}/denypolicies`
     *
     *
     *   The attachment point is identified by its URL-encoded full resource name,
     *   which means that the forward-slash character, `/`, must be written as
     *   `%2F`. For example,
     *   `policies/cloudresourcemanager.googleapis.com%2Fprojects%2Fmy-project/denypolicies`.
     *
     *   For organizations and folders, use the numeric ID in the full resource
     *   name. For projects, you can use the alphanumeric or the numeric ID.
     * @param {number} request.pageSize
     *   The maximum number of policies to return. IAM ignores this value and uses
     *   the value 1000.
     * @param {string} request.pageToken
     *   A page token received in a {@link protos.google.iam.v2.ListPoliciesResponse|ListPoliciesResponse}. Provide this token to
     *   retrieve the next page.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.iam.v2.Policy|Policy}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/policies.list_policies.js</caption>
     * region_tag:iam_v2_generated_Policies_ListPolicies_async
     */
    listPoliciesAsync(request?: protos.google.iam.v2.IListPoliciesRequest, options?: CallOptions): AsyncIterable<protos.google.iam.v2.IPolicy>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
